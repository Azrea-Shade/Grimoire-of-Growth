name: Android CI (testing)

on:
  push:
    branches:
      - "testing/v1.0"
      - "feature/**"
      - "bugfix/**"
      - "chore/**"
  pull_request:
    branches: ["testing/v1.0"]
  workflow_dispatch:

concurrency:
  group: android-testing-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_MODULE: app

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install Android commandline tools
        run: |
          set -eux
          SDK_ROOT=/usr/local/lib/android/sdk
          sudo mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"
          curl -fsSL -o cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          sudo unzip -q cmdtools.zip -d cmdline-tools
          sudo mv cmdline-tools/cmdline-tools cmdline-tools/latest
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "$SDK_ROOT/cmdline-tools/latest/bin:$SDK_ROOT/platform-tools" >> $GITHUB_PATH
          yes | $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install platforms & build-tools
        run: |
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"

      - name: Install Gradle 7.6 (with cache)
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 7.6

      - name: Make gradlew executable (if present)
        if: ${{ hashFiles('gradlew') != '' }}
        run: chmod +x gradlew

      - name: Build debug & capture log
        run: |
          set -euxo pipefail
          mkdir -p out/LOGS out/APK
          gradle --no-daemon --stacktrace :${APP_MODULE}:assembleDebug | tee out/LOGS/gradle.log
          shopt -s globstar nullglob
          cp -a ${APP_MODULE}/build/outputs/**/*.apk out/APK/ || true
          cp -a ${APP_MODULE}/build/outputs/**/*.aab out/APK/ || true
          ls -R out || true

      - name: Compute safe artifact name
        run: |
          SAFE_REF="${GITHUB_REF_NAME//\//-}"
          SAFE_REF="${SAFE_REF//[^A-Za-z0-9._-]/-}"
          echo "SAFE_REF=$SAFE_REF" >> "$GITHUB_ENV"

      - name: Upload LOGS (testing)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-testing-${{ env.SAFE_REF }}-${{ github.run_number }}
          path: out/LOGS/**
          if-no-files-found: warn
          retention-days: 14

      - name: Upload APKs (testing)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apks-testing-${{ env.SAFE_REF }}-${{ github.run_number }}
          path: out/APK/**
          if-no-files-found: warn
          retention-days: 14

      - name: Summary
        if: always()
        run: |
          {
            echo "### Testing build"
            echo "- LOGS: \`out/LOGS/\`"
            echo "- APK/AAB: \`out/APK/\`"
            echo "Branch: \`${GITHUB_REF_NAME}\` â€¢ Commit: \`${GITHUB_SHA::7}\`"
          } >> "$GITHUB_STEP_SUMMARY"
