name: Android CI (Debug APK, structured logs)

permissions:
  contents: write

on:
  push:
    branches: [ "main", "mvp", "feature/**" ]
  pull_request:
    branches: [ "main", "mvp", "feature/**" ]
  workflow_dispatch:

env:
  APP_VERSION: "1.0.0"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Prepare log dir
        run: |
          mkdir -p ci-logs
          echo "run started: $(date -u)" | tee ci-logs/00_run.txt

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "17" }

      - name: Setup Android SDK (base)
        uses: android-actions/setup-android@v3

      - name: Install Android packages (logged + retry)
        shell: bash
        run: |
          set -o pipefail
          tries=0
          until [ $tries -ge 3 ]; do
            { sdkmanager --install "platform-tools" "platforms;android-31" "build-tools;31.0.0"; } |& tee -a ci-logs/01_android-sdk.log
            code=${PIPESTATUS[0]}; echo "$code" > ci-logs/01_android-sdk.exit
            [ $code -eq 0 ] && break
            tries=$((tries+1)); echo "retry $tries/3 in 5s…" | tee -a ci-logs/01_android-sdk.log; sleep 5
          done
          yes | sdkmanager --licenses |& tee -a ci-logs/01_android-sdk.log || true

      - name: Setup Gradle 7.6
        uses: gradle/actions/setup-gradle@v4
        with: { gradle-version: "7.6" }

      - name: Build Debug APK (capture log)
        shell: bash
        continue-on-error: true
        run: |
          set -o pipefail
          gradle -v |& tee -a ci-logs/02_gradle-version.log
          gradle :app:assembleDebug --stacktrace |& tee -a ci-logs/04_build.log
          echo "${PIPESTATUS[0]}" > ci-logs/04_build.exit

      # ➕ added: list outputs for visibility (no behavioral change)
      - name: List build outputs (ALWAYS)
        if: always()
        shell: bash
        run: |
          echo "=== outputs under app/build/outputs ===" | tee -a ci-logs/05_outputs.txt
          (find app/build/outputs -type f -print 2>/dev/null || true) | tee -a ci-logs/05_outputs.txt

      # ➕ added: always try to upload APK(s); warns if none (no impact on build)
      - name: Upload Debug APK(s)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Grimoire-of-Growth-debug-${{ github.run_number }}
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/bundle/debug/*.aab
          if-no-files-found: warn
          retention-days: 14

      - name: Upload logs (ALWAYS)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_number }}
          path: ci-logs/**
          if-no-files-found: warn
          retention-days: 14

      - name: Push logs to ci-logs (organized)
        if: always()
        shell: bash
        continue-on-error: true
        run: |
          DATE="$(date -u +%Y-%m-%d)"
          TIME="$(date -u +%H%M%SZ)"
          SHORT_SHA="${GITHUB_SHA::7}"
          RUN_DIR="v${APP_VERSION}/${GITHUB_REF_NAME}/${DATE}/run-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}_${TIME}_${SHORT_SHA}"
          cat > ci-logs/meta.json <<META
          { "version":"${APP_VERSION}", "branch":"${GITHUB_REF_NAME}", "run_id":"${GITHUB_RUN_ID}",
            "run_number":"${GITHUB_RUN_NUMBER}", "commit":"${GITHUB_SHA}", "utc":"$(date -u +%FT%TZ)" }
          META
          git config user.name "CI Logs Bot"
          git config user.email "actions@users.noreply.github.com"
          git fetch origin ci-logs || true
          git checkout -B ci-logs origin/ci-logs || git checkout -B ci-logs
          mkdir -p "$RUN_DIR"
          cp -r ci-logs/* "$RUN_DIR"/
          git add -A
          git commit -m "logs: $RUN_DIR" || true
          git push origin ci-logs || true

      - name: Fail if something failed
        if: always()
        shell: bash
        run: |
          fail=0
          [ -f ci-logs/01_android-sdk.exit ] && [ "$(cat ci-logs/01_android-sdk.exit)" != "0" ] && fail=1
          [ -f ci-logs/04_build.exit ] && [ "$(cat ci-logs/04_build.exit)" != "0" ] && fail=1
          exit $fail
