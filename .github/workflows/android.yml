name: Android CI (mvp â†’ ci-logs + artifacts)

on:
  push:
    branches: [ "mvp" ]
  workflow_dispatch:

permissions:
  contents: write

env:
  JAVA_VERSION: "17"
  GRADLEW: "./gradlew"
  LOGS_BRANCH: "ci-logs"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x $GRADLEW || true

      - name: Build debug & capture log
        id: buildstep
        run: |
          set -euo pipefail
          mkdir -p out/LOGS out/APK
          $GRADLEW --no-daemon --stacktrace --info assembleDebug 2>&1 | tee out/LOGS/gradle.log

          # Collect APK/AAB/JSON/XML from all modules
          shopt -s globstar nullglob
          for f in **/build/outputs/**/*.apk **/build/outputs/**/*.aab **/build/outputs/**/*.json **/build/outputs/**/*.xml; do
            [ -f "$f" ] && cp -f "$f" out/APK/
          done
          shopt -u globstar nullglob

          # Compute version string
          V=$(grep -RhoE 'versionName\s*"?=?"?[^"]+"' --include='build.gradle*' . | head -n1 | sed -E 's/.*versionName\s*"?=?"?([^"]+)".*/\1/' || true)
          [ -z "$V" ] && V=$(git describe --tags --always 2>/dev/null || true)
          [ -z "$V" ] && V="0.0.0"
          echo "VERSION=$V" >> "$GITHUB_ENV"

          {
            echo "version: $V"
            echo "branch:  ${GITHUB_REF_NAME}"
            echo "commit:  ${GITHUB_SHA}"
            echo "run:     ${GITHUB_RUN_NUMBER}"
            echo "time:    $(date -u +%FT%TZ)"
          } > out/LOGS/run-manifest.txt

      - name: Upload LOGS artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ github.run_number }}-v{{ env.VERSION }}
          path: out/LOGS/**
          if-no-files-found: warn
          retention-days: 30

      - name: Upload APKs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apks-${{ github.run_number }}-v{{ env.VERSION }}
          path: out/APK/**
          if-no-files-found: warn
          retention-days: 30

      - name: Push LOGS + APKs to ci-logs
        if: always()
        run: |
          set -euo pipefail
          git ls-remote --exit-code --heads origin "${LOGS_BRANCH}"

          DATE="$(date -u +%Y-%m-%d)"
          TIME="$(date -u +%H%M%SZ)"
          SHORT_SHA="${GITHUB_SHA::7}"
          RUN_DIR="runs/v${VERSION}/${GITHUB_REF_NAME}/run-${GITHUB_RUN_NUMBER}_${TIME}_${SHORT_SHA}"
          echo "RUN_DIR=${RUN_DIR}"

          git config user.name  "CI Bot"
          git config user.email "ci-bot@users.noreply.github.com"

          WT="$(mktemp -d)"
          git fetch origin "${LOGS_BRANCH}"
          git worktree add -B "${LOGS_BRANCH}" "${WT}" "origin/${LOGS_BRANCH}"

          mkdir -p "${WT}/${RUN_DIR}/LOGS" "${WT}/${RUN_DIR}/APK"
          cp -a out/LOGS/. "${WT}/${RUN_DIR}/LOGS/" || true
          if ls out/APK/* >/dev/null 2>&1; then
            cp -a out/APK/. "${WT}/${RUN_DIR}/APK/" || true
          else
            echo "no debug APK/AAB produced in this run" > "${WT}/${RUN_DIR}/APK/README.txt"
          fi

          (cd "${WT}" && git add . && git commit -m "ci: ${GITHUB_REF_NAME} #${GITHUB_RUN_NUMBER} v${VERSION} (${GITHUB_SHA::7})" || true)
          (cd "${WT}" && git push origin "${LOGS_BRANCH}")
